#+TITLE: Emacs Configuration
#+AUTHOR: Nikhil Ghobale

I've been using Emacs form Aug of 2016. I am pretty new to this editor.
I am learning my way into this editor.

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations.

* Installing Emacs



On Ubuntu, [[http://manpages.ubuntu.com/manpages/xenial/en/man8/apt.8.html][apt package manger]] is an easy way to install emacs.

Here's what the parameter means.
- ~emacs24~ :: installs stable branch of emacs
- ~emacs~ :: installs devlopment branch of emacs
- ~emacs24-nox~ :: installs emacs without x windows support
 
#+begin_src sh
sudo apt build-dep emacs
sudo apt install emacs
#+end_src

* libraries
#+BEGIN_SRC emacs-lisp
  (use-package dash)
#+END_SRC
* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Nikhil Ghobale"
      user-mail-address "nkhlghbl@gmail.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]]. 

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Theme
** Cyberpunk theme

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful. However, I don't like the
boxes around the mode line.

#+begin_src emacs-lisp

  (use-package cyberpunk-theme
    :if (window-system)
    :ensure t
    :init
    (progn
     (load-theme 'cyberpunk t)
     (set-face-attribute `mode-line nil
                         :box nil)
     (set-face-attribute `mode-line-inactive nil
                         :box nil)
    ))
#+end_src

I tend to switch themes more often than normal. For example, switching
to a lighter theme (such as the default) or to a different theme
depending on the time of day or my mood. Normally, switching themes is
a multi-step process with ~disable-theme~ and ~load-theme~. The
~switch-theme~ function will do that in one swoop. I just choose which
theme I want to go to.

** Solarized theme

Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

#+begin_src emacs-lisp
(use-package solarized-theme
  :defer 10
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+end_src

** Monokai theme

#+begin_src emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))
#+end_src

** Waher theme

#+begin_src emacs-lisp :tangle no
(use-package waher-theme
  if (window-system)
  :ensure t
  :init
  (load-theme 'waher))
#+end_src

** Convenient theme functions

#+begin_src emacs-lisp
  (defun switch-theme (theme)
    "Disables any currently active themes and loads THEME."
    ;; This interactive call is taken from `load-theme'
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
                               (mapc 'symbol-name
                                     (custom-available-themes))))))
    (let ((enabled-themes custom-enabled-themes))
      (mapc #'disable-theme custom-enabled-themes)
      (load-theme theme t)))

  (defun disable-active-themes ()
    "Disables any currently active themes listed in `custom-enabled-themes'."
    (interactive)
    (mapc #'disable-theme custom-enabled-themes))

  (bind-key "s-<f12>" 'switch-theme)
  (bind-key "s-<f11>" 'disable-active-themes)
#+end_src

** nlinum-mode
#+BEGIN_SRC emacs-lisp
(use-package nlinum
    :ensure t
    :config
    (nlinum-mode))
#+END_SRC
** nlinum-relative
#+BEGIN_SRC emacs-lisp
  (use-package nlinum-relative
      :ensure t
      :config
      ;; something else you want
      ;;(nlinum-relative-setup-evil)
      (add-hook 'prog-mode-hook 'nlinum-relative-mode)
      :init
      (setq nlinum-relative-redisplay-delay 0)      ;; delay
      (setq nlinum-relative-current-symbol "->")      ;; or "" for display current line number
      (setq nlinum-relative-offset 0)                 ;; 1 if you want 0, 2, 3...
      )
#+END_SRC
* Font
[[http://adobe-fonts.github.io/source-code-pro/][Source Code Pro]] is a nice monospaced font.
To install it on Ubuntu, you have to go to [[https://github.com/adobe-fonts/source-code-pro/releases/tag/2.030R-ro/1.050R-it][Adobe Source Code Pro Releases Page]]. Unzip it and install it via font viewer
And then this is how we tell Emacs to use the font we want to use.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Source Code Pro-14"))
#+END_SRC

* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq-default indent-tabs-mode nil)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)
  (set-default 'cursor-type 'hbar)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode)

  (column-number-mode)

  (global-visual-line-mode)
  (diminish 'visual-line-mode)
  (global-hl-line-mode -1)
  (setq uniquify-buffer-name-style 'forward)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; Don't beep at me
  (setq visible-bell t)
#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src
* List buffers

ibuffer is the improved version of list-buffers.

#+begin_src emacs-lisp
;; make ibuffer the default buffer lister.
(defalias 'list-buffers 'ibuffer-other-window)
#+end_src


source: http://ergoemacs.org/emacs/emacs_buffer_management.html

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]
* Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
          :ensure t 
          :config
          (which-key-mode))
#+END_SRC
  
* Try Package
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)

#+END_SRC

* Org Stuff
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
       (global-set-key "\C-cc" 'org-capture)
       (global-set-key "\C-ca" 'org-agenda)
       (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

org-reveal

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config
    (setq org-reveal-root "file:////home/nkhl/Dropbox/gitpackages/reveal.js/"))
#+END_SRC
* Window Management

#+begin_src emacs-lisp
(bind-key "s-C-<left>"  'shrink-window-horizontally)
(bind-key "s-C-<right>" 'enlarge-window-horizontally)
(bind-key "s-C-<down>"  'shrink-window)
(bind-key "s-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src


** Ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
      ))

#+END_SRC

*** windmove on/off
#+BEGIN_SRC emacs-lisp
   (windmove-default-keybindings)
   (winner-mode t)
#+END_SRC
  
* Auto Complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; it looks like counsel is a requirement for swiper
  (use-package counsel
    :ensure t
    )

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      ;(global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      ;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
      ;(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      ;(global-set-key (kbd "<f1> l") 'counsel-load-library)
      ;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      ;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      ;(global-set-key (kbd "C-c g") 'counsel-git)
      ;(global-set-key (kbd "C-c j") 'counsel-git-grep)
      ;(global-set-key (kbd "C-c k") 'counsel-ag)
      ;(global-set-key (kbd "C-x l") 'counsel-locate)
      ;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      ;(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

   (use-package avy
     :ensure t
     :bind ("M-s" . avy-goto-char))
#+END_SRC

* Yassnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
      (yas-global-mode 1))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

* Powerline

;;#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :i
    ;;;(powerline-center-theme)
  ;;  ;(setq powerline-default-separator 'wave)
;;)
;;#+END_SRC


  (use-package micgoline
    :ensure t
    :init
  ; (setq powerline-default-separator 'roundstub)



(sml/setup)
  (setq sml/theme 'dark)
  (setq sml/theme 'light)
  (setq sml/theme 'respectful)
* Web Devlopment
** Web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))
    :init
    (setq web-mode-engines-alist
        '(("php"    . "\\.phtml\\'")
          ("blade"  . "\\.blade\\.")))
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-extra-snippets
        '(("erb" . (("toto" . "<% toto | %>\n\n<% end %>")))
          ("php" . (("dowhile" . "<?php do { ?>\n\n<?php } while (|); ?>")
                    ("debug" . "<?php error_log(__LINE__); ?>")))
          ))
    (setq web-mode-extra-auto-pairs
        '(("erb"  . (("beg" "end")))
          ("php"  . (("beg" "end")
                     ("beg" "end")))
          ))
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-comment-keywords t)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-ac-sources-alist
    '(("css" . (ac-source-css-property))
      ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-ac-sources-alist
    '(("php" . (ac-source-yasnippet ac-source-php-auto-yasnippets))
      ("html" . (ac-source-emmet-html-aliases ac-source-emmet-html-snippets))
      ("css" . (ac-source-css-property ac-source-emmet-css-snippets))))

  (add-hook 'web-mode-before-auto-complete-hooks
            '(lambda ()
               (let ((web-mode-cur-language
                      (web-mode-language-at-pos)))
                 (if (string= web-mode-cur-language "php")
                     (yas-activate-extra-mode 'php-mode)
                   (yas-deactivate-extra-mode 'php-mode))
                 (if (string= web-mode-cur-language "css")
                     (setq emmet-use-css-transform t)
                   (setq emmet-use-css-transform nil)))))
    )
#+END_SRC

** Emmet

According to [[http://emmet.io/][their website]] , “Emmet — the essential toolkit for web-developers.”

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :commands emmet-mode
    :config
    (add-hook 'html-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode))
#+END_SRC
* Scratch
#+BEGIN_SRC emacs-lisp
  (use-package scratch
    :ensure t
    :commands scratch)
#+END_SRC
* COMMENT Mini-Buffer Editing 
  Sometimes you want to be able to do fancy things with the text that you're entering into the minibuffer. Sometimes you just want to be able to read it, especially when it comes to lots of text. This binds C-M-e in a minibuffer) so that you can edit the contents of the minibuffer before submitting it.
#+BEGIN_SRC emacs-lisp
  (use-package miniedit
    :commands minibuffer-edit
    ;;:init 
    ;;(miniedit-install)
    )
#+END_SRC
* Tramp
#+BEGIN_SRC emacs-lisp
  (use-package tramp)
#+END_SRC

* Misc
** Display Time

When displaying the time with =display-time-mode=, I don't care about
the load average.

#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
#+end_src

** Display Battery Mode

See the documentation for =battery-mode-line-format= for the format
characters.

#+begin_src emacs-lisp
(setq battery-mode-line-format "[%b%p%% %t]")
#+end_src

** Docview keybindings

Convenience bindings to use doc-view with the arrow keys.

#+begin_src emacs-lisp
(use-package doc-view
  :commands doc-view-mode
  :config
  (define-key doc-view-mode-map (kbd "<right>") 'doc-view-next-page)
  (define-key doc-view-mode-map (kbd "<left>") 'doc-view-previous-page))
#+end_src

** Emacsclient

#+begin_src emacs-lisp
(use-package server
  :config
  (server-start))
#+end_src
