#+Title: Org Mode SetUp file
#+Author: Nikhil Ghobale

* Org Initial set up 
Installing org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t)
#+END_SRC
common org-mode key-bindings.
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
       (global-set-key "\C-cc" 'org-capture)
       (global-set-key "\C-ca" 'org-agenda)
       (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC
* Org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC
* Envirnoment
#+BEGIN_SRC emacs-lisp
(setenv "BROWSER" "chromium-browser")
#+END_SRC
* Variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
         '(org-directory "~/Dropbox/orgfiles")
         '(org-default-notes-file (concat org-directory "/notes.org"))
         '(org-export-html-postamble nil)
         '(org-hide-leading-stars t)
         '(org-startup-folded (quote overview))
         '(org-startup-indented t)
         )
#+END_SRC
* Org file apps
#+BEGIN_SRC emacs-lisp
  (setq org-file-apps
          (append '(
                    ("\\.pdf\\'" . "evince %s")
                    ("\\.html\\'" . "chromium-browser %s")
                    ) org-file-apps ))
#+END_SRC
* Ox-odt
#+BEGIN_SRC emacs-lisp
(require 'ox-odt)
#+END_SRC
* GnuPlot (for Babel)
#+BEGIN_SRC emacs-lisp
(use-package gnuplot
:ensure t)
#+END_SRC
* Publish
#+BEGIN_SRC emacs-lisp
  ;; (use-package ox-twbs
  ;; :ensure ox-twbs
  ;; )
  ;; (setq org-publish-project-alist
  ;;       '(
  ;;            ("blog-posts"
  ;; 		:base-directory "~/gh/cestlaz.github.io/_org/"
  ;;       		:base-extension "org"
  ;; 		:publishing-directory "~/gh/cestlaz.github.io/_drafts/"
  ;; 		:recursive nil		      
  ;; ;      		:publishing-function org-publish-org-to-html
  ;; :publishing-function org-html-publish-to-html
  ;; ;:publishing-function org-twbs-publish-to-html
  ;;       		:headline-levels 4
  ;; 		:auto-index nil
  ;; 		:htmlized-source t
  ;; 		:section-numbers nil
  ;; 		:toc nil
  ;;       		:auto-preamble nil
  ;; 		:table-of-contents nil
  ;; 		:html-extension "html"		
  ;; 		:body-only t
  ;;       		)
  ;;            ("apcs-hw"
  ;; 		:base-directory "~/gh/stuycs-apcs-z.github.io/_org/"
  ;;       		:base-extension "org"
  ;; 		:publishing-directory "~/gh/stuycs-apcs-z.github.io/_posts/"
  ;; 		:recursive nil		      
  ;; ;      		:publishing-function org-publish-org-to-html
  ;;       		:publishing-function org-html-publish-to-html
  ;;       		:headline-levels 4
  ;; 		:auto-index nil
  ;; 		:section-numbers nil
  ;; 		:toc nil
  ;;       		:auto-preamble nil
  ;; 		:table-of-contents nil
  ;; 		:html-extension "html"		
  ;; 		:body-only t
  ;;       		))

  ;;       )
#+END_SRC
* Org-complete
#+BEGIN_SRC emacs-lisp
(use-package org-ac
:ensure t
:init (progn
(require 'org-ac)
(org-ac/config-default)

))
#+END_SRC
* org-present
#+BEGIN_SRC emacs-lisp
(use-package org-present
:ensure t)
#+END_SRC
* Hydra
* org capture and agenda stuff
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)


  (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
                               "~/Dropbox/orgfiles/i.org"
                               "~/Dropbox/orgfiles/schedule.org"))


  (setq org-capture-templates
        '(("a" "Appointment" entry (file+headline  "~/Dropbox/orgfiles/gcal.org" "Appointments")
           "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
          ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/notes.org" "Notes")
           "* Note %?\n%T")
           ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
           ("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/i.org" "Blog Topics")
           "* %?\n%T" :prepend t)
          ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do Items")
           "* %?\n%T" :prepend t)

          ("j" "Journal" entry (file+datetree "~/Dropbox/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))


  (defadvice org-capture-finalize 
      (after delete-capture-frame activate)  
    "Advise capture-finalize to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))

  (defadvice org-capture-destroy 
    (after delete-capture-frame activate)  
     "Advise capture-destroy to close the frame"  
     (if (equal "capture" (frame-parameter nil 'name))  
         (delete-frame)))  

  (use-package noflet
  :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
           (interactive)
           (make-frame '((name . "capture")))
           (select-frame-by-name "capture")
           (delete-other-windows)
           (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
             (org-capture)))
  ;;emacsclient -ne  '(make-capture-frame)'
#+END_SRC
* Org & Calfw
#+BEGIN_SRC emacs-lisp
(use-package calfw
:ensure t
:config
(require 'calfw) 
(require 'calfw-org)
(setq cfw:org-overwrite-default-keybinding t)
(require 'calfw-ical)

;(load-file "~/Dropbox/shared/calfw.el")
)
(use-package calfw-gcal
:ensure t
:config
(require 'calfw-gcal))
#+END_SRC
* Latex
#+BEGIN_SRC emacs-lisp
(use-package tex
:ensure auctex)

(defun tex-view ()
    (interactive)
    (tex-send-command "evince" (tex-append tex-print-file ".pdf")))
#+END_SRC
